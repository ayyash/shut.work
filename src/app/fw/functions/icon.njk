<section>
	<a name="icon" class="anchor-target"></a>
	<h3 class="f3 spaced">Icon</h3>
	<p>The symbol definition function defines all icons generated by
		<code class="shut-inline">.getIcon()</code>
		function.
	</p>
	<div class="spaced small box box-yellow-light">Icon font definition is included if
		<code class="shut-inline">@enable-icon-font</code>
		is true.</div>
	<pre><code class="language-less">// .symbolDef inside the box looks like this:
.symbolDef() {
    font-family: @icon-font;
    text-transform: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    display: inline-block;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    speak: none;
    font-smooth: always;
    /* enable ligatures ================ */
    letter-spacing: 0;
    -webkit-font-feature-settings: 'liga';
    -moz-font-feature-settings: 'liga=1';
    -moz-font-feature-settings: 'liga';
    -ms-font-feature-settings: 'liga' 1;
    -o-font-feature-settings: 'liga';
    font-feature-settings: 'liga';
    -webkit-font-variant-ligatures: discretionary-ligatures;
    font-variant-ligatures: discretionary-ligatures;
    /* ligatures? */
    content: attr(data-icon);
}

// let's fine tune some properties for the current project
.symbolDef() {
	vertical-align: middle;
	font-size: 150%;
}

// pass name of class, and the character value
.icon(@name, @value);
/* to generate: 
.@{name} {
	&:before {
		content: @value;
	}
}
*/

// adds symbol definiton to :before with "value" as content
.getIcon(@value);

// adds symbol definition to :after with "value" as content
.getIcon(@value, "after");

// adds content prop (only) to :before
.changeIcon(@value);

// adds content prop (only) to :after
.changeIcon(@value, "after");

// generates content and font-family props
.displayIcon(@value);</code></pre>
	<h4 class="f4">usage</h4>
	<pre><code class="language-less">// save the icon in a variable to re-use
@icon-place: "\e900";
@icon-right: "\e904";
@icon-down: "\e902";
@icon-up: "\e905";

// this produces .icon-place class ready to use, no symbol association with it yet
.icon(icon-place,@icon-place); 

// .getIcon to generate symbol definition and content
.my-new-icon {
	.getIcon(@icon-place);
	color: @red;
}

// pass "after" as a second argument to use :after instead
.next-icon {
	.getIcon(@icon-right, "after");
}

// use .changeIcon(value) to overwrite content only of :before
.expand-icon {
	color: @green;
	.getIcon(@icon-down);

	&.expanded {
		.changeIcon(@icon-up);
	}
}

// pass "after" as a second argument to overwrite content of :after 
.collapse-icon {
	color: @red;
	.getIcon(@icon-up, "after");

	&.collapsed {
		.changeIcon(@icon-down, "after");
	}
}

// and display an icon in a pseudo element
.fancy-icon {
	position: relative;
	text-align: center;
	&:before {
		margin: auto;
		border-radius: 1000px;
		display: flex;
		justify-content: center;
		align-items: center;
		width: 50px;
		height: 50px;
		color: @white;
		background-color: fade(@blue, 50);
		.displayIcon(@icon-place);
	}

}
</code></pre>

	<div class="spaced box box-white">

		<ul class="alist">
			<li>
				<span class="symbol icon-place"></span> .icon-place.symbol
			</li>
			<li>
				<span class="symbol my-new-icon"></span> .my-new-icon
			</li>
			<li>
				<span class="next-icon">icon after</span>
			</li>
			<li class="card">
				<div class="expand-icon">expand</div> <span class="hbreath">...</span>
				<div class="expand-icon expanded">expanded</div>
			</li>
			<li class="card">
				<div class="collapse-icon">collapse</div> <span class="hbreath">...</span>
				<div class="collapse-icon collapsed">collapsed</div>
			</li>
			<li>
				<div class="fancy-icon">.fancy-icon</div>
			</li>
		</ul>
	</div>
</section>