var gulp = require('gulp');
var gulpConfig = require('./shut.config.json');
var inject = require('gulp-inject');

// generate icons from styles generated by icomoons
// prepare icons from remote folder that has the extracted files from icomoon tool if that is the case

// source: ./fontfiles
// destination raw/dummy and src/assets/fonts
const fontspath = gulpConfig.iconfontspath;
const _prepvars = function(){
    return gulp.src([fontspath + 'variables.less', fontspath + 'selection.json'])
        .pipe(gulp.dest(gulpConfig.srcUrl + 'dummy'));
};
const _prepfonts = function(){
    return gulp.src([fontspath + 'fonts/*'])
        .pipe(gulp.dest(gulpConfig.distUrl + 'fonts'));
}

exports.prepicons = gulp.parallel(_prepfonts, _prepvars);

let liIconStr = "";
const _getLigas = function(){
	// require selection.json here, find ligature by icon var
	var icons = require('../' + gulpConfig.srcUrl + 'dummy/selection.json').icons;
    let array = {};
    for (a of icons) {
		array[a.properties.name] = a.properties.ligatures;

	}
	return array;

};


const _cssicons = function () {

    let returnStr = "";
	const ligas = _getLigas();

    return gulp.src(gulpConfig.srcUrl + 'less/ui.icons.less')
        .pipe(inject(
            gulp.src(gulpConfig.srcUrl + 'dummy/variables.less'),
            {
                starttag: '// inject:icons', endtag: '// endinject',
                transform: function (filePath, file) {
                    // for ever @icon-arrow-all: "\e900"; generate @icon-arrow-all: "\e900";    .icon(icon-arrow-all, @icon-arrow-all);
                    var lines = file.contents.toString('utf8').split('\n');
                    lines.forEach(function (value) {
                        if (value.indexOf('@icon-') > -1) {
                            // add to the line icon(something, icon);
                            name = value.split(":")[0];
                            value += "	.icon({0},{1});\r\n"
                                .replace("{0}", name.substring(1))
                                .replace("{1}", name);

                            returnStr += value;

                            liIconStr += '<li><span class="symbol {0}">{1}</span> <i>{2}</i></li>'
                                .replace("{0}", name.substring(1))
								.replace("{1}", name)
								.replace("{2}", ligas[name.substring(6)]);
                        }
                    })
                    return returnStr;
                }
            }
        ))
        .pipe(gulp.dest(gulpConfig.srcUrl + 'less/'));



};

exports.iconset = gulp.series(_cssicons, function(){


    return gulp.src(gulpConfig.srcUrl + 'dummy/iconset.html')
        .pipe(inject(
            gulp.src(gulpConfig.srcUrl + 'dummy/variables.less', { read: false }),
            {
                starttag: '<!-- inject:icons -->', endtag: '<!-- endinject -->',
                transform: function (filePath, file) {
                    //just inject text as is
                    return liIconStr;
                }
            }
        ))
        .pipe(gulp.dest(gulpConfig.srcUrl + 'dummy/'));
});

exports.createicons = gulp.series(exports.prepicons, exports.iconset);
